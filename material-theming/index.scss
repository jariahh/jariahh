@use 'sass:map';
@use '@angular/material' as mat;
@use '@angular/material/core/theming/theming';
@use "@angular/material/button/button-theme";
@use "@angular/material/button/button-theme-private";
@use "@angular/material/core/mdc-helpers/mdc-helpers";
@use '@material/theme/theme-color' as mdc-theme-color;
@use './button/button-helper';
@use './toolbar/toolbar-helper';

@function is-map($var){
  @return type-of($var) == 'map';
}
@mixin button_color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  @include mdc-helpers.using-mdc-theme($config) {
    $is-dark: map.get($config, is-dark);
    $colors: map.get($config-or-theme, color);
    @each $color, $values in $colors {
      @if(is-map($values)) {
        $contrast: map.get($values, contrast);
        @if(is-map($contrast)) {
          $on-surface: map.get($contrast, 500);
          $surface: map.get($values, 500);
          $disabled-ink-color: rgba($on-surface, if($is-dark, 0.5, 0.38));
          $disabled-container-color: rgba($on-surface, 0.12);
          .mat-mdc-button {
            &.mat-#{$color} {
              @include button-helper.button-variant($surface);
            }
          }

          .mat-mdc-unelevated-button {
            &.mat-#{$color} {
              @include button-helper.unelevated-button-variant($on-surface, $surface);
            }
          }

          .mat-mdc-raised-button {
            &.mat-#{$color} {
              @include button-helper.raised-button-variant($on-surface, $surface);
            }
          }

          .mat-mdc-outlined-button {
            &.mat-#{$color} {
              @include button-helper.outlined-button-variant($surface);
            }
          }
          .mat-mdc-icon-button {
            .mat-#{$color} {
              --mdc-icon-button-icon-color: $on-surface;
            }
          }
        }
      }
    }
  }
}

@mixin toolbar_color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  $is-dark: map.get($config, is-dark);
  $colors: map.get($config-or-theme, color);
  @each $color, $values in $colors {
    @if (is-map($values)) {
      $contrast: map.get($values, contrast);
      @if (is-map($contrast)) {
        $on-surface: map.get($contrast, 500);
        $surface: map.get($values, 500);
        .mat-toolbar {
          &.mat-#{$color} {
            @include toolbar-helper.palette-styles($on-surface, $surface);
          }
        }
      }
    }
  }
}
